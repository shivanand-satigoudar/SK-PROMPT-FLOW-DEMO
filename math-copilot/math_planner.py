import asyncio
import matplotlib.pyplot as plt
from io import BytesIO
from PIL import Image

from promptflow import tool
import semantic_kernel as sk
from semantic_kernel.planning.sequential_planner import SequentialPlanner
from plugins.MathPlugin.Math import Math as Math
from promptflow.connections import AzureOpenAIConnection
from semantic_kernel.connectors.ai.open_ai import AzureChatCompletion, AzureTextCompletion

@tool
def my_python_tool(
    input: str,
    deployment_type: str,
    deployment_name: str,
    AzureOpenAIConnection: AzureOpenAIConnection,
) -> str:
    # Initialize the kernel
    kernel = sk.Kernel(log=sk.NullLogger())

    # Add the chat service
    if deployment_type == "chat-completion":
        kernel.add_chat_service(
            "chat_completion",
            AzureChatCompletion(
                deployment_name,
                AzureOpenAIConnection.api_base,
                AzureOpenAIConnection.api_key,
            ),
        )
    elif deployment_type == "text-completion":
        kernel.add_text_completion_service(
            "text_completion",
            AzureTextCompletion(
                deployment_name,
                AzureOpenAIConnection.api_base,
                AzureOpenAIConnection.api_key,
            ),
        )

    planner = SequentialPlanner(kernel=kernel)

    # Import the native functions
    math_plugin = kernel.import_skill(Math(), "MathPlugin")

    ask = "Use the available math functions to solve this word problem: " + input

    try:
        # Attempt to create a plan and execute it
        plan = asyncio.run(planner.create_plan_async(ask))
        result = asyncio.run(kernel.run_async(plan)).result

        for index, step in enumerate(plan._steps):
            print("Function: " + step.skill_name + "." + step._function.name)
            print("Input vars: " + str(step.parameters.variables))
            print("Output vars: " + str(step._outputs))
        
        # Display any plots generated by the Math class
        for fig in plt.get_fignums():
            plt.figure(fig)
            buf = BytesIO()
            plt.savefig(buf, format="png")
            plt.close()
            buf.seek(0)
            image = Image.open(buf)
            image.show()

        print("Result: " + str(result))
        return str(result)

    except Exception as e:
        # Handle the exception gracefully, e.g., print an error message
        print("Error: " + str(e))
        return "This task cannot be performed"

# Example usage:
# input_str = "some math problem"
# deployment_type_str = "chat-completion"
# deployment_name_str = "your_deployment_name"
# azure_openai_connection = AzureOpenAIConnection(api_base="your_api_base", api_key="your_api_key")
# my_python_tool(input_str, deployment_type_str, deployment_name_str, azure_openai_connection)
